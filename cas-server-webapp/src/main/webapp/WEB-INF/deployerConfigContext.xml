<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:util="http://www.springframework.org/schema/util"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd




       http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd">


    <util:map id="authenticationHandlersResolvers">
        <entry key-ref="proxyAuthenticationHandler" value-ref="proxyPrincipalResolver"/>
        <entry key-ref="primaryAuthenticationHandler" value-ref="primaryPrincipalResolver"/>
    </util:map>

    <util:list id="authenticationMetadataPopulators">
        <ref bean="successfulHandlerMetaDataPopulator"/>
        <ref bean="rememberMeAuthenticationMetaDataPopulator"/>

        <!--
        <bean class="org.jasig.cas.extension.clearpass.CacheCredentialsMetaDataPopulator"
              c:credentialCache-ref="encryptedMap" />
         -->
    </util:list>

    <bean id="attributeRepository" class="org.jasig.services.persondir.support.NamedStubPersonAttributeDao"
          p:backingMap-ref="attrRepoBackingMap"/>

    <alias name="personDirectoryPrincipalResolver" alias="primaryPrincipalResolver"/>

    <util:map id="attrRepoBackingMap">
        <entry key="uid" value="uid"/>
        <entry key="eduPersonAffiliation" value="eduPersonAffiliation"/>
        <entry key="groupMembership" value="groupMembership"/>
        <entry>
            <key>
                <value>memberOf</value>
            </key>
            <list>
                <value>faculty</value>
                <value>staff</value>
                <value>org</value>
            </list>
        </entry>
    </util:map>

    <alias name="serviceThemeResolver" alias="themeResolver"/>

    <alias name="jsonServiceRegistryDao" alias="serviceRegistryDao"/>

    <alias name="defaultTicketRegistry" alias="ticketRegistry"/>

    <alias name="ticketGrantingTicketExpirationPolicy" alias="grantingTicketExpirationPolicy"/>
    <alias name="multiTimeUseOrTimeoutExpirationPolicy" alias="serviceTicketExpirationPolicy"/>

    <alias name="anyAuthenticationPolicy" alias="authenticationPolicy"/>
    <alias name="acceptAnyAuthenticationPolicyFactory" alias="authenticationPolicyFactory"/>

    <bean id="auditTrailManager"
          class="org.jasig.inspektr.audit.support.Slf4jLoggingAuditTrailManager"
          p:entrySeparator="${cas.audit.singleline.separator:|}"
          p:useSingleLine="${cas.audit.singleline:false}"/>

    <alias name="neverThrottle" alias="authenticationThrottle"/>

    <util:list id="monitorsList">
        <ref bean="memoryMonitor"/>
        <ref bean="sessionMonitor"/>
    </util:list>

    <alias name="defaultPrincipalFactory" alias="principalFactory"/>
    <alias name="defaultAuthenticationTransactionManager" alias="authenticationTransactionManager"/>
    <alias name="defaultPrincipalElectionStrategy" alias="principalElectionStrategy"/>
    <alias name="tgcCipherExecutor" alias="defaultCookieCipherExecutor"/>

    <!--edit by sf.xiong  start...-->
    <bean id="md5PasswordEncoder" class="org.jasig.cas.authentication.handler.DefaultPasswordEncoder" autowire="byName">
        <constructor-arg  value="${cas.authn.password.encoding.alg:}"/>
    </bean>

    <bean id="queryDatabaseAuthenticationHandler" name="primaryAuthenticationHandler" class="org.jasig.cas.adaptors.jdbc.QueryDatabaseAuthenticationHandler">
        <property name="passwordEncoder" ref="md5PasswordEncoder"/>
    </bean>

    <alias name="dataSource" alias="queryDatabaseDataSource"/>

    <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource"
          p:driverClass="${c3p0.jdbc.driverClass}"
          p:jdbcUrl="${c3p0.jdbc.url}"
          p:user="${c3p0.jdbc.user}"
          p:password="${c3p0.jdbc.password}"
          p:initialPoolSize="${c3p0.jdbc.pool.initialPoolSize}"
          p:minPoolSize="${c3p0.jdbc.pool.minSize}"
          p:maxPoolSize="${c3p0.jdbc.pool.maxSize}"
          p:maxIdleTimeExcessConnections="${c3p0.jdbc.pool.maxIdleTimeExcessConnections}"
          p:checkoutTimeout="${c3p0.jdbc.pool.checkoutTimeout}"
          p:acquireIncrement="${c3p0.jdbc.pool.acquireIncrement}"
          p:acquireRetryAttempts="${c3p0.jdbc.pool.acquireRetryAttempts}"
          p:acquireRetryDelay="${c3p0.jdbc.pool.acquireRetryDelay}"
          p:idleConnectionTestPeriod="${c3p0.jdbc.pool.idleConnectionTestPeriod}"
          p:preferredTestQuery="${c3p0.jdbc.preferredTestQuery}"/>
    <!--end-->
</beans>
